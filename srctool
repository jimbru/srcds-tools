#!/bin/bash
#
# srctool
#
# Useful for managing srcds. Currently supports only Counter-Strike Souce.
# -jimbru

SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MMSOURCE="mmsource-1.8.7-linux.tar.gz"
SOURCEMOD="sourcemod-1.4.2-linux.tar.gz"

cmd_config() {
  ARGCOUNT=$#
  SM_CFG=false

  while getopts :s OPTION
  do
    case $OPTION in
      s ) SM_CFG=true ;;
      ? ) echo "Unrecognized option: $OPTARG"; exit 1 ;;
    esac
    ((--ARGCOUNT))
  done

  if [[ $ARGCOUNT != 2 ]]
  then
    echo "'$0 config' requires two arguments: the config file and the srcds directory."
    print_usage
    exit 1
  fi

  FILE=${@:$OPTIND:1}
  DIR=${@:$OPTIND+1:1}/cstrike/cfg/

  if $SM_CFG
  then
    DIR=$DIR/sourcemod/
  fi

  echo "Copying config file $FILE to $DIR ..."
  cp $FILE $DIR
  print_done
}

cmd_help() {
  print_usage
  echo ""
  echo "srctool commands:"
  echo "  config [-s] <file> <dir>  Copies the specified config file to the specified srcds instance."
  echo "  help                      Prints help."
  echo "  install <dir>             Installs a srcds instance to the specificed directory."
  echo "  map <archive> <dir>       Copies the specified map archive to the specified srcds instance."
  echo "  rcon <addr> <pwd> <cmd>   Send rcon command to the server at the specified address."
  echo ""
}

cmd_install() {
  INSTALL_PATH=$1
  : ${INSTALL_PATH:="."}

  SRCDS_PATH=$INSTALL_PATH/srcds
  mkdir -p $SRCDS_PATH

  echo -e "\n>> Installing srcds into $SRCDS_PATH ..."
  cmd_install_srcds $SRCDS_PATH

  echo -e "\n>> Installing Metamod:Source ..."
  cmd_install_mmsource $SRCDS_PATH

  echo -e "\n>> Installing Sourcemod ..."
  cmd_install_sourcemod $SRCDS_PATH

  print_done
}

cmd_install_srcds() {
  echo yes | $SCRIPT_PATH/hldsupdatetool.bin > /dev/null
  if [[ $? != 0 ]]
  then
    print_error "Hldsupdatetool.bin exited abnormally."
    exit 1
  fi

  mv readme.txt $1/srcds_readme.txt
  mv steam $1/

  RETURN=1
  INDEX=0
  RETRY=5
  while [[ $RETURN != 0 && $INDEX < $RETRY ]]
  do
    $1/steam -command update -game "Counter-Strike Source" -dir $1
    RETURN=$?
    ((++INDEX))
  done
  if [[ $INDEX == $RETRY ]]
  then
    print_error "Steam failed after $RETRY retries."
    exit 1
  fi
}

cmd_install_mmsource() {
  mkdir tmp
  tar -zxf $MMSOURCE -C tmp/
  cp -Rp tmp/addons $1/cstrike/
  cp metamod.vdf $1/cstrike/addons/
  rm -rf tmp
}

cmd_install_sourcemod() {
  mkdir tmp
  tar -zxf $SOURCEMOD -C tmp/
  cp -Rp tmp/addons $1/cstrike/
  cp -Rp tmp/cfg $1/cstrike/
  rm -rf tmp
}

cmd_map() {
  if [[ $# != 2 ]]
  then
    echo "'$0 map' requires two arguments: the map archive and the srcds directory."
    print_usage
    exit 1
  fi

  echo "Installing map archive $1 ..."
  mkdir tmp

  if [[ $1 == *.zip ]]
  then
    unzip -q $1 -d tmp/
  else
    tar -zxf $1 -C tmp/
  fi

  cp -Rp tmp/cstrike/* $2/cstrike/
  rm -rf tmp
  print_done
}

cmd_rcon() {
  if [[ $# < 3 ]]
  then
    echo "'$0 rcon' requires three arguments: the server's IP address, the rcon password, and the command."
    print_usage
    exit 1
  fi

  ADDR=$1
  PASSWD=$2
  CMD=${@:3}

  echo -e "Sending rcon @ $ADDR ($PASSWD): '$CMD' ...\n"
  ./rcon.py -a $ADDR -p $PASSWD $CMD
  if [[ $? == 0 ]]
  then
    print_done
  else
    print_error
  fi
}

print_done() {
  GREEN='\e[0;32m'
  ENDCOLOR='\e[0m'
  echo -e "[ ${GREEN}DONE${ENDCOLOR} ]"
}

print_error() {
  RED='\e[0;31m'
  ENDCOLOR='\e[0m'
  echo -e "[ ${RED}ERROR${ENDCOLOR} ] $1"
}

print_usage() {
  echo "Usage: $0 <command> [-opts] [<args>]"
}

# -----

if [[ $# < 1 ]]
then
  print_usage
  exit 1
fi

ACTION=$1
shift
case $ACTION in
  config  ) cmd_config $@ ;;
  help    ) cmd_help ;;
  install ) cmd_install $@ ;;
  map     ) cmd_map $@ ;;
  rcon    ) cmd_rcon $@ ;;
  *       ) echo "Unknown action. Type '$0 help' for help. Exiting..." ;;
esac
exit 0
